// Prisma schema for Client-Store Service

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["client_store"]
}

// City model - Synchronized from vehicle-service
model City {
  id String @id @default(cuid())

  // Basic Information
  name        String @unique // Mumbai, Delhi, Bangalore, etc.
  displayName String // Mumbai, New Delhi, Bengaluru, etc.
  code        String @unique // MUM, DEL, BLR, etc.

  // Location Details
  state    String // Maharashtra, Delhi, Karnataka, etc.
  country  String @default("India")
  timezone String @default("Asia/Kolkata")

  // Geographic Coordinates (City Center)
  latitude  Float
  longitude Float

  // Administrative Details
  pinCodeRange String? // JSON array of pin codes served
  regionCode   String? // North, South, East, West

  // Operational Details
  isActive      Boolean   @default(true)
  isOperational Boolean   @default(true) // City operational for services
  launchDate    DateTime?

  // Business Information
  estimatedPopulation Int?
  marketPotential     String? // High, Medium, Low

  // Event Sourcing Fields (for cross-service synchronization)
  version           Int     @default(1) // For optimistic locking
  lastModifiedBy    String? // User ID who last modified
  eventSequence     Int     @default(0) // Auto-increment for event ordering
  lastSyncAt        DateTime @default(now()) // Last sync timestamp

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cities")
  @@schema("client_store")
}

// Minimal User reference for client relationships
// This is a reference table only - full user data comes from auth-service
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  firstName    String
  lastName     String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Client relationships
  clientsManaged Client[] @relation("ClientAccountManager")

  @@map("users")
  @@schema("client_store")
}

// Client model - Business entities that have stores
model Client {
  id                    String   @id @default(cuid())
  name                  String   @unique
  clientCode            String   @unique
  clientType            String   // B2B, B2C, Government, Enterprise
  industrySector        String?  // Automotive OEM, Fleet Operator, Logistics
  businessCategory      String?  // Manufacturer, Dealer, Service Provider, End Customer

  // Contact Information
  primaryContactPerson  String?
  designation          String?
  email                String?
  secondaryEmail       String?
  phone                String?
  secondaryPhone       String?

  // Address & Location
  city                 String?
  state                String?
  pinCode              String?

  // Business Details
  registrationNumber   String?
  panNumber           String?
  gstNumber           String?

  // EV-Specific Fields
  evPortfolio         String?  // JSON array: 2-Wheeler, 3-Wheeler, 4-Wheeler, Commercial
  fleetSize           Int?
  hasChargingInfra    Boolean  @default(false)
  chargingInfraDetails String? // JSON details
  batteryTechPreference String?
  serviceRequirements String?  // JSON array: Maintenance, Charging, Financing

  // Commercial Details
  paymentTerms        String?  // Net 30, Net 60, etc.
  preferredPaymentMethod String?
  taxCategory         String?
  discountCategory    String?

  // Rider Earning Configuration
  baseOrderRate       Float    @default(25.0) // ₹25 per order
  rateEffectiveDate   DateTime @default(now())
  rateType            String   @default("fixed") // fixed, variable, distance-based
  minimumRate         Float    @default(15.0)
  maximumRate         Float    @default(50.0)

  // Bulk Order Bonus Configuration
  bulkBonusEnabled    Boolean  @default(false)
  bulkOrdersThreshold Int      @default(10)
  bulkBonusAmount     Float    @default(0.0)
  bulkResetPeriod     String   @default("daily") // daily, weekly

  // Weekly Target Bonus
  weeklyBonusEnabled  Boolean  @default(false)
  weeklyOrderTarget   Int      @default(0)
  weeklyBonusAmount   Float    @default(0.0)

  // Performance Multiplier
  performanceMultiplierEnabled Boolean @default(false)
  topPerformerRate    Float    @default(1.2)
  performanceCriteria String   @default("rating") // rating, speed, volume

  // Payment Configuration
  paymentCycle        String   @default("weekly") // daily, weekly, bi-weekly
  paymentMethods      String?  // JSON array of payment methods
  minimumPayout       Float    @default(100.0)
  payoutDay          String   @default("Friday")

  // Relationship Management
  clientStatus        String   @default("Active") // Active, Inactive, Prospect, Suspended
  acquisitionDate     DateTime @default(now())
  accountManagerId    String?
  clientPriority      String   @default("Medium") // High, Medium, Low
  relationshipType    String   @default("Direct") // Direct, Partner, Distributor

  // Timestamps
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relationships
  stores              Store[]
  accountManager      User?    @relation("ClientAccountManager", fields: [accountManagerId], references: [id])
  riderEarnings       RiderEarning[]

  @@map("clients")
  @@schema("client_store")
}

// Store model - Individual store locations for clients
model Store {
  id                    String   @id @default(cuid())
  clientId              String
  storeName            String
  storeCode            String   @unique
  storeType            String   // Showroom, Service Center, Charging Hub, Experience Center
  brandFranchise       String?

  // Location Details
  completeAddress      String
  city                 String   // Key field for multi-city operations
  state                String
  country              String   @default("India")
  pinCode              String
  landmark             String?
  gpsLatitude          Float?
  gpsLongitude         Float?
  zoneRegion           String?  // North, South, East, West

  // Contact Information
  storeManagerName     String?
  contactNumber        String?
  emailAddress         String?
  whatsappNumber       String?

  // Business Operations
  storeStatus          String   @default("Active") // Active, Inactive, Under Construction, Planned

  // Store-Specific Offers for Riders
  currentOfferRate     Float    @default(0.0) // Extra ₹ per delivery
  offerStartDate       DateTime?
  offerEndDate         DateTime?
  offerType            String   @default("none") // temporary, permanent, seasonal, none
  offerReason          String?
  isOfferActive        Boolean  @default(false)

  // Traffic & Performance Metrics
  busyLevel            String   @default("medium") // low, medium, high, peak
  averageOrdersPerDay  Int      @default(0)
  peakHours            String?  // JSON array: ['12:00-14:00', '19:00-21:00']
  busyDays             String?  // JSON array: ['friday', 'saturday', 'sunday']
  orderDifficultyLevel String   @default("medium") // easy, medium, hard
  averageDeliveryDistance Float @default(0.0) // in km

  // Performance Tracking
  monthlyOrderVolume   Int      @default(0)
  riderRating          Float    @default(0.0) // 1-5 rating from riders
  averagePickupTime    Int      @default(0) // in minutes
  storePriority        String   @default("standard") // vip, standard, low

  // Timestamps
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relationships
  client               Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  riderEarnings        RiderEarning[]

  @@unique([clientId, storeCode])
  @@map("stores")
  @@schema("client_store")
}

// Rider Earnings Calculation and Tracking
model RiderEarning {
  id                   String   @id @default(cuid())
  riderId              String   // Reference to rider in rider-service
  clientId             String
  storeId              String
  orderId              String?  // Reference to order in order-service

  // Rate Breakdown
  baseRate             Float    // ₹25 (from client)
  storeOfferRate       Float    @default(0.0) // ₹10 (from store offer)
  totalRate            Float    // ₹35 (base + offer)

  // Bonuses Applied
  bulkOrderBonus       Float    @default(0.0) // ₹0 or bonus amount
  performanceBonus     Float    @default(0.0) // ₹0 or multiplier bonus
  weeklyTargetBonus    Float    @default(0.0) // ₹0 or weekly bonus
  specialEventBonus    Float    @default(0.0) // ₹0 or event bonus

  finalEarning         Float    // Total amount rider earns

  // Metadata
  orderDate            DateTime @default(now())
  deliveryTime         Int?     // minutes taken
  riderRating          Float?   // customer rating (1-5)
  distance             Float?   // delivery distance in km

  // Calculation Details
  bonusesApplied       String?  // JSON array of bonus types applied
  rateCalculationLog   String?  // JSON log of how rate was calculated

  // Payment Status
  paymentStatus        String   @default("pending") // pending, paid, on-hold
  paymentDate          DateTime?
  paymentMethod        String?
  paymentReference     String?

  // Timestamps
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relationships
  client               Client   @relation(fields: [clientId], references: [id])
  store                Store    @relation(fields: [storeId], references: [id])

  @@map("rider_earnings")
  @@schema("client_store")
}

// Weekly Rider Summary for Performance Tracking
model WeeklyRiderSummary {
  id                   String   @id @default(cuid())
  riderId              String   // Reference to rider in rider-service
  weekStartDate        DateTime
  weekEndDate          DateTime

  // Order Statistics
  totalOrders          Int      @default(0)
  averageOrdersPerDay  Float    @default(0.0)
  bestDayOrders        Int      @default(0)
  worstDayOrders       Int      @default(0)

  // Earnings Breakdown
  baseEarnings         Float    @default(0.0) // From base rates
  offerEarnings        Float    @default(0.0) // From store offers
  bonusEarnings        Float    @default(0.0) // From incentives
  totalEarnings        Float    @default(0.0)

  // Performance Metrics
  averageRating        Float    @default(0.0)
  averageDeliveryTime  Float    @default(0.0) // in minutes
  onTimeDeliveryPercentage Float @default(0.0)
  totalDistance        Float    @default(0.0) // km

  // Targets Achievement
  dailyTargetAchieved  String?  // JSON array [true, false, true, ...] for each day
  weeklyTargetAchieved Boolean  @default(false)
  bonusesEarned        String?  // JSON array of bonus types earned

  // Client Performance
  topClientId          String?  // Client with most orders
  topStoreId           String?  // Store with most orders
  citiesWorked         String?  // JSON array of cities worked in

  // Payment Summary
  totalPaid            Float    @default(0.0)
  pendingAmount        Float    @default(0.0)
  paymentCount         Int      @default(0)

  // Timestamps
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@unique([riderId, weekStartDate])
  @@map("weekly_rider_summaries")
  @@schema("client_store")
}

// Rate History for tracking rate changes
model RateHistory {
  id                   String   @id @default(cuid())
  clientId             String
  oldBaseRate          Float
  newBaseRate          Float
  changeReason         String?
  effectiveDate        DateTime
  changedBy            String?  // User ID who made the change

  // Timestamps
  createdAt            DateTime @default(now())

  @@map("rate_history")
  @@schema("client_store")
}
