// Prisma schema for Auth Service - PostgreSQL Version
// This version is updated to work with PostgreSQL in Docker

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - focused on authentication
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  password     String
  firstName    String
  lastName     String
  phone        String?
  isActive     Boolean  @default(true)
  lastLoginAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Many-to-many relationship with roles
  userRoles    UserRole[]
  
  // Audit trails
  createdBy    String?
  updatedBy    String?

  @@map("users")
}

// Role model
model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  userRoles   UserRole[]
  permissions RolePermission[]

  // Audit trails
  createdBy   String?
  updatedBy   String?

  @@map("roles")
}

// Permission model
model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  resource    String   // e.g., 'vehicles', 'orders', 'users'
  action      String   // e.g., 'create', 'read', 'update', 'delete'
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  rolePermissions RolePermission[]

  @@unique([resource, action])
  @@map("permissions")
}

// Junction table for User-Role many-to-many
model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String
  
  assignedAt DateTime @default(now())
  assignedBy String?
  expiresAt  DateTime?

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

// Junction table for Role-Permission many-to-many
model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String
  
  grantedAt DateTime @default(now())
  grantedBy String?

  // Relationships
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}
