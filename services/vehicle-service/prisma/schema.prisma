// Prisma schema for Vehicle Inventory Management Service

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["vehicle"]
}

// Vehicle model - Core vehicle information
// OEM Master Data (Honda, Bajaj, TVS, etc.)
model OEM {
  id String @id @default(cuid())

  // Basic Information
  name        String @unique // Honda, Bajaj, TVS, etc.
  displayName String // Display name for UI
  code        String @unique // Short code like HON, BAJ, TVS

  // OEM Details
  country      String? // India, Japan, etc.
  website      String?
  supportEmail String?
  supportPhone String?

  // Business Information
  gstin             String?
  panNumber         String?
  registeredAddress String?

  // Brand Information
  logoUrl     String? // S3 URL for brand logo
  brandColor  String? // Hex color code
  description String?

  // Status
  isActive    Boolean @default(true)
  isPreferred Boolean @default(false) // For prioritizing in UI

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  models VehicleModel[]

  @@map("oems")
  @@schema("vehicle")
}

// Vehicle Model Master Data (Activa, Pulsar, Jupiter, etc.)
model VehicleModel {
  id    String @id @default(cuid())
  oemId String

  // Basic Information
  name        String // Activa, Pulsar, Jupiter, etc.
  displayName String // Display name for UI
  modelCode   String // ACT125, PUL150, etc.

  // Model Details
  category         String // Scooter, Motorcycle, E-Vehicle
  segment          String // Entry, Premium, Luxury
  launchYear       Int?
  discontinuedYear Int?

  // Technical Specifications (Default values for this model)
  vehicleType     String  @default("2-Wheeler") // 2-Wheeler, 3-Wheeler, etc.
  fuelType        String // Electric, Petrol, Hybrid
  engineCapacity  String? // "125cc", "150cc", etc.
  batteryType     String? // Li-ion, Lead-acid, LFP, NMC, etc.
  batteryCapacity String? // "3.2kWh", "5.0kWh", etc.
  maxSpeed        Int? // km/h
  range           Int? // km on full charge/tank
  chargingTime    String? // "4 hours", "6 hours", etc.
  seatingCapacity Int     @default(2)
  weight          Float? // kg
  dimensions      String? // JSON with length, width, height

  // Variants and Options
  availableVariants String? // JSON array of variants like DLX, Standard
  availableColors   String? // JSON array of available colors
  standardFeatures  String? // JSON array of standard features
  optionalFeatures  String? // JSON array of optional features

  // Pricing Information
  basePrice  Float? // Ex-showroom price
  priceRange String? // "1.2L - 1.5L"

  // Service Information
  serviceInterval Int? // months or km
  warrantyPeriod  Int? // months
  spareParts      String? // JSON with common spare parts info

  // Media
  imageUrl    String? // S3 URL for model image
  brochureUrl String? // S3 URL for brochure

  // Status
  isActive  Boolean @default(true)
  isPopular Boolean @default(false) // For prioritizing in UI

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  oem      OEM       @relation(fields: [oemId], references: [id], onDelete: Cascade)
  vehicles Vehicle[]

  @@unique([oemId, modelCode])
  @@map("vehicle_models")
  @@schema("vehicle")
}

// City Master Data - MASTER SOURCE for all services
model City {
  id String @id @default(cuid())

  // Basic Information
  name        String @unique // Mumbai, Delhi, Bangalore, etc.
  displayName String // Mumbai, New Delhi, Bengaluru, etc.
  code        String @unique // MUM, DEL, BLR, etc.

  // Location Details
  state    String // Maharashtra, Delhi, Karnataka, etc.
  country  String @default("India")
  timezone String @default("Asia/Kolkata")

  // Geographic Coordinates (City Center)
  latitude  Float
  longitude Float

  // Administrative Details
  pinCodeRange String? // JSON array of pin codes served
  regionCode   String? // North, South, East, West

  // Operational Details
  isActive      Boolean   @default(true)
  isOperational Boolean   @default(true) // City operational for services
  launchDate    DateTime?

  // Business Information
  estimatedPopulation Int?
  marketPotential     Float? // Estimated market size in INR

  // Event Sourcing Fields (for cross-service synchronization)
  version           Int     @default(1) // For optimistic locking
  lastModifiedBy    String? // User ID who last modified
  eventSequence     Int     @default(0) // Auto-increment for event ordering
  lastSyncAt        DateTime @default(now()) // Last sync timestamp

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  hubs Hub[]
  eventLogs CityEventLog[]

  @@map("cities")
  @@schema("vehicle")
}

// Hub Master Data - Physical locations where vehicles are stored
model Hub {
  id String @id @default(cuid())

  // Basic Information
  name   String
  code   String @unique // MUM_01, DEL_CP, BLR_KR, etc.
  cityId String

  // Location Details (Mandatory)
  address   String
  pinCode   String
  landmark  String?

  // Geographic Coordinates (Mandatory)
  latitude  Float
  longitude Float

  // Hub Type & Classification
  hubType     String @default("Storage") // Storage, Service, Charging, Mixed
  hubCategory String @default("Primary") // Primary, Secondary, Service Point

  // Capacity & Operations
  vehicleCapacity Int? // Maximum vehicles that can be stored
  chargingPoints  Int  @default(0)
  serviceCapacity Int  @default(0) // Vehicles that can be serviced per day

  // Operational Hours
  operatingHours String? // JSON object with hours for each day
  is24x7         Boolean @default(false)

  // Contact Information
  managerName      String?
  contactNumber    String?
  emailAddress     String?
  alternateContact String?

  // Facilities
  hasParking         Boolean @default(true)
  hasSecurity        Boolean @default(false)
  hasCCTV            Boolean @default(false)
  hasWashFacility    Boolean @default(false)
  hasChargingStation Boolean @default(false)
  hasServiceCenter   Boolean @default(false)

  // Status & Operations
  status         String  @default("Active") // Active, Inactive, Under Construction, Maintenance
  isPublicAccess Boolean @default(false)

  // Business Information
  monthlyRent     Float?
  setupCost       Float?
  operationalCost Float?

  // Audit Fields
  createdBy String? // User ID who created the hub
  updatedBy String? // User ID who last updated

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  city     City      @relation(fields: [cityId], references: [id], onDelete: Cascade)
  vehicles Vehicle[]

  @@unique([cityId, code])
  @@map("hubs")
  @@schema("vehicle")
}

model Vehicle {
  id      String @id @default(cuid())
  modelId String

  // Mandatory Hub Assignment - Every vehicle MUST be assigned to a hub
  hubId String

  // Basic Vehicle Information
  registrationNumber String  @unique
  chassisNumber      String? @unique
  engineNumber       String? @unique

  // Vehicle Specific Details (can override model defaults)
  variant String? // DLX, Standard, etc.
  color   String
  year    Int? // Manufacturing year

  // Vehicle Classification (inherited from model, can be overridden)
  vehicleType     String? // 2-wheeler, 3-wheeler, etc.
  batteryType     String? // Li-ion, Lead-acid, etc.
  batteryCapacity Float? // in kWh
  maxRange        Int? // in km
  maxSpeed        Int? // in km/h

  // Purchase/Registration Details
  purchaseDate     DateTime?
  registrationDate DateTime
  purchasePrice    Float?
  currentValue     Float?

  // Calculated Fields
  ageInMonths Int? // Auto-calculated from registration/purchase date

  // Ownership & Assignment
  fleetOperatorId String? // Reference to client/fleet operator
  currentRiderId  String? // Currently assigned rider
  assignmentDate  DateTime?

  // Current Status
  operationalStatus String  @default("Available") // Available, Assigned, Under Maintenance, Retired, Damaged
  serviceStatus     String  @default("Active") // Active, Inactive, Scheduled for Service
  location          String? // Current location/hub
  mileage           Int     @default(0) // in km

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  model            VehicleModel           @relation(fields: [modelId], references: [id], onDelete: Cascade)
  hub              Hub                    @relation(fields: [hubId], references: [id], onDelete: Restrict)
  rcDetails        RCDetails?
  insuranceDetails InsuranceDetails[]
  serviceHistory   ServiceRecord[]
  serviceRequests  ServiceRequest[]
  damageRecords    DamageRecord[]
  mediaFiles       VehicleMedia[]
  handoverRecords  HandoverRecord[]
  statusHistory    VehicleStatusHistory[]

  @@map("vehicles")
  @@schema("vehicle")
}

// RC (Registration Certificate) Details
model RCDetails {
  id        String @id @default(cuid())
  vehicleId String @unique

  // RC Information
  rcNumber         String    @unique
  ownerName        String
  ownerAddress     String
  registrationDate DateTime
  validUpto        DateTime?
  fuelType         String    @default("Electric")
  seatingCapacity  Int?

  // Document Management
  rcPhotoUrl           String? // S3 URL for RC document
  rcUploadDate         DateTime?
  rcVerificationStatus String    @default("Pending") // Pending, Verified, Rejected

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@map("rc_details")
  @@schema("vehicle")
}

// Insurance Details
model InsuranceDetails {
  id        String @id @default(cuid())
  vehicleId String

  // Insurance Information
  insuranceType   String // Comprehensive, Third Party, etc.
  providerName    String // Insurance company name
  policyNumber    String   @unique
  policyStartDate DateTime
  policyEndDate   DateTime
  premiumAmount   Float
  coverageAmount  Float

  // Status
  isActive        Boolean @default(true)
  renewalReminder Boolean @default(true)

  // Document Management
  policyPhotoUrl     String? // S3 URL for policy document
  policyUploadDate   DateTime?
  verificationStatus String    @default("Pending") // Pending, Verified, Rejected, Expired

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@map("insurance_details")
  @@schema("vehicle")
}

// Service History Records
model ServiceRecord {
  id        String @id @default(cuid())
  vehicleId String

  // Service Information
  serviceType   String // Preventive, Corrective, Emergency
  serviceDate   DateTime
  description   String
  issueReported String?
  workPerformed String

  // Service Provider
  mechanicName  String?
  serviceCenter String?

  // Cost Information
  laborCost Float @default(0.0)
  partsCost Float @default(0.0)
  totalCost Float @default(0.0)

  // Parts Information (JSON)
  partsReplaced String? // JSON array of parts

  // Status
  serviceStatus    String    @default("Completed") // Scheduled, In Progress, Completed, Cancelled
  nextServiceDue   DateTime?
  mileageAtService Int?

  // Quality Control
  qualityRating Int? // 1-5 rating
  serviceNotes  String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  vehicle        Vehicle          @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  mediaFiles     ServiceMedia[]
  serviceRequests ServiceRequest[]

  @@map("service_records")
  @@schema("vehicle")
}

// Damage Records
model DamageRecord {
  id        String @id @default(cuid())
  vehicleId String

  // Damage Information
  damageType   String // Accident, Wear & Tear, Vandalism, etc.
  severity     String // Minor, Moderate, Major, Total Loss
  description  String
  damageDate   DateTime
  reportedDate DateTime @default(now())

  // Location & Context
  damageLocation    String? // Where on vehicle
  incidentLocation  String? // Where incident occurred
  weatherConditions String?

  // Reporting
  reportedBy         String // Rider ID or staff member
  witnessDetails     String?
  policeReport       Boolean @default(false)
  policeReportNumber String?

  // Resolution
  resolutionStatus String    @default("Reported") // Reported, Under Review, Approved, Repaired, Rejected
  estimatedCost    Float?
  actualCost       Float?
  repairDate       DateTime?
  repairDetails    String?

  // Insurance Claim
  insuranceClaim Boolean @default(false)
  claimNumber    String?
  claimStatus    String? // Submitted, Approved, Rejected, Settled
  claimAmount    Float?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  vehicle    Vehicle       @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  mediaFiles DamageMedia[]

  @@map("damage_records")
  @@schema("vehicle")
}

// Vehicle Media Files (Photos, Documents)
model VehicleMedia {
  id        String @id @default(cuid())
  vehicleId String

  // File Information
  fileName String
  fileUrl  String // S3 URL or local path
  s3Key    String? // S3 object key for AWS operations
  fileType String // image/jpeg, image/png, application/pdf
  fileSize Int // in bytes

  // Media Classification
  mediaType     String // RC, Insurance, Vehicle Photo, etc.
  mediaCategory String // Document, Photo, Video
  description   String?

  // Upload Information
  uploadedBy String // User/Rider ID
  uploadDate DateTime @default(now())
  source     String // mobile_app, web_admin, api

  // Metadata
  isActive Boolean @default(true)
  tags     String? // JSON array of tags

  // Relationships
  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@map("vehicle_media")
  @@schema("vehicle")
}

// Service-related Media
model ServiceMedia {
  id              String @id @default(cuid())
  serviceRecordId String

  // File Information
  fileName String
  fileUrl  String
  fileType String
  fileSize Int

  // Media Context
  mediaType   String // Before, After, Parts, Receipt
  description String?
  uploadDate  DateTime @default(now())

  // Relationships
  serviceRecord ServiceRecord @relation(fields: [serviceRecordId], references: [id], onDelete: Cascade)

  @@map("service_media")
  @@schema("vehicle")
}

// Damage-related Media
model DamageMedia {
  id             String @id @default(cuid())
  damageRecordId String

  // File Information
  fileName String
  fileUrl  String
  fileType String
  fileSize Int

  // Media Context
  mediaType   String // Damage Photo, Police Report, Repair Receipt
  description String?
  uploadDate  DateTime @default(now())

  // Relationships
  damageRecord DamageRecord @relation(fields: [damageRecordId], references: [id], onDelete: Cascade)

  @@map("damage_media")
  @@schema("vehicle")
}

// Vehicle Handover Records (Pickup/Drop by Riders)
model HandoverRecord {
  id        String @id @default(cuid())
  vehicleId String

  // Handover Information
  handoverType String // Pickup, Drop
  riderId      String // Rider taking/returning vehicle
  handoverDate DateTime @default(now())

  // Vehicle Condition
  mileageReading    Int?
  batteryPercentage Int?
  fuelLevel         Int? // For hybrid vehicles

  // Condition Assessment
  overallCondition    String // Excellent, Good, Fair, Poor
  exteriorCondition   String
  interiorCondition   String
  mechanicalCondition String

  // Issues Reported
  issuesReported String? // JSON array of issues
  photosUploaded Boolean @default(false)

  // Location
  handoverLocation String?
  gpsLatitude      Float?
  gpsLongitude     Float?

  // Verification
  verifiedBy       String? // Staff member who verified
  verificationDate DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  vehicle       Vehicle         @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  handoverMedia HandoverMedia[]

  @@map("handover_records")
  @@schema("vehicle")
}

// Handover Media (Photos taken during pickup/drop)
model HandoverMedia {
  id               String @id @default(cuid())
  handoverRecordId String

  // File Information
  fileName String
  fileUrl  String
  fileType String
  fileSize Int

  // Photo Context
  photoType    String // Front, Back, Left, Right, Dashboard, Damage
  description  String?
  gpsLatitude  Float?
  gpsLongitude Float?

  // Upload Information
  uploadDate DateTime @default(now())

  // Relationships
  handoverRecord HandoverRecord @relation(fields: [handoverRecordId], references: [id], onDelete: Cascade)

  @@map("handover_media")
  @@schema("vehicle")
}

// Vehicle Status History (Audit Trail)
model VehicleStatusHistory {
  id        String @id @default(cuid())
  vehicleId String

  // Status Change Information
  previousStatus String?
  newStatus      String
  changeReason   String?
  changedBy      String // User ID
  changeDate     DateTime @default(now())

  // Additional Context
  notes             String?
  relatedRecordType String? // service, damage, handover
  relatedRecordId   String?

  // Relationships
  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@map("vehicle_status_history")
  @@schema("vehicle")
}

// Fleet Performance Analytics (for reporting)
model FleetAnalytics {
  id String @id @default(cuid())

  // Time Period
  periodType String // daily, weekly, monthly
  periodDate DateTime

  // Fleet Metrics
  totalVehicles        Int @default(0)
  activeVehicles       Int @default(0)
  vehiclesUnderService Int @default(0)
  damagedVehicles      Int @default(0)

  // Utilization Metrics
  utilizationRate Float @default(0.0) // percentage
  averageMileage  Float @default(0.0)
  totalRevenue    Float @default(0.0)

  // Cost Metrics
  maintenanceCosts Float @default(0.0)
  damageCosts      Float @default(0.0)
  insuranceCosts   Float @default(0.0)

  // Performance Indicators
  averageServiceTime   Float @default(0.0) // hours
  averageRepairTime    Float @default(0.0) // hours
  customerSatisfaction Float @default(0.0) // rating

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([periodType, periodDate])
  @@map("fleet_analytics")
  @@schema("vehicle")
}

// Unified Service Request System
// Main service request model that integrates scheduling and parts management
model ServiceRequest {
  id           String @id @default(cuid())
  ticketNumber String @unique
  vehicleId    String
  requestedBy  String // User ID who created the request
  assignedTo   String? // Technician ID assigned to the service

  // Service Details
  serviceType ServiceRequestType
  priority    ServiceRequestPriority
  status      ServiceRequestStatus @default(DRAFT)
  title       String
  description String
  issueReported String?
  symptoms    String? // JSON array

  // Scheduling Information
  requestedDate    DateTime?
  scheduledDate    DateTime?
  estimatedDuration Int? // in hours
  actualStartTime  DateTime?
  actualEndTime    DateTime?

  // Location and Resources
  serviceLocation String?
  serviceCenter   String?
  serviceBay      String?

  // Cost Information
  estimatedLaborCost Float?
  estimatedPartsCost Float?
  estimatedTotalCost Float?
  actualLaborCost    Float?
  actualPartsCost    Float?
  actualTotalCost    Float?

  // Work Details
  workPerformed           String?
  completionNotes         String?
  qualityCheckNotes       String?
  customerApprovalRequired Boolean @default(false)
  customerApproved        Boolean?
  customerComments        String?

  // Service Record Integration
  serviceRecordId String? // Links to actual service record when work is completed

  // Additional Metadata
  tags  String? // JSON array
  notes String?

  // Audit Trail
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      String
  lastModifiedBy String

  // Relationships
  vehicle         Vehicle               @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  serviceRecord   ServiceRecord?        @relation(fields: [serviceRecordId], references: [id])
  partsRequests   ServicePartsRequest[]
  partsUsed       ServicePartsUsed[]
  approvals       ServiceApproval[]
  attachments     ServiceAttachment[]
  workflowSteps   ServiceWorkflowStep[]

  @@map("service_requests")
  @@schema("vehicle")
}

// Parts requests within a service request
model ServicePartsRequest {
  id               String @id @default(cuid())
  serviceRequestId String
  sparePartId      String
  partName         String
  partNumber       String
  requestedQuantity Int
  approvedQuantity Int?
  issuedQuantity   Int?
  unitCost         Float?
  totalCost        Float?
  urgency          PartUrgency @default(Normal)
  justification    String
  status           PartRequestStatus @default(Pending)
  requestedBy      String
  approvedBy       String?
  issuedBy         String?
  requestedAt      DateTime @default(now())
  approvedAt       DateTime?
  issuedAt         DateTime?
  notes            String?

  // Cross-service integration fields
  sparePartsRequestId String? // Links to spare-parts-service SparePartRequest
  storeId            String? // Store where part should be sourced from
  externalRequestStatus String? // Status from spare-parts-service

  // Relationships
  serviceRequest ServiceRequest @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)

  @@map("service_parts_requests")
  @@schema("vehicle")
}

// Parts actually used during service
model ServicePartsUsed {
  id               String @id @default(cuid())
  serviceRequestId String
  sparePartId      String
  partName         String
  partNumber       String
  quantity         Int
  unitCost         Float
  totalCost        Float
  batchNumber      String?
  serialNumber     String?
  installedBy      String
  installedAt      DateTime @default(now())
  warrantyPeriod   Int? // in months
  warrantyExpiry   DateTime?
  notes            String?

  // Cross-service integration fields
  installedPartId   String? // Links to spare-parts-service InstalledPart
  storeId          String? // Store where part was sourced from
  supplierBatch    String? // Supplier batch information

  // Relationships
  serviceRequest ServiceRequest @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)

  @@map("service_parts_used")
  @@schema("vehicle")
}

// Approval workflow for service requests
model ServiceApproval {
  id               String @id @default(cuid())
  serviceRequestId String
  approvalType     ApprovalType
  requiredFor      String // What this approval is for
  status           ApprovalStatus @default(Pending)
  approverRole     String
  approvedBy       String?
  approvedAt       DateTime?
  comments         String?
  conditions       String?

  // Relationships
  serviceRequest ServiceRequest @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)

  @@unique([serviceRequestId, approverRole])
  @@map("service_approvals")
  @@schema("vehicle")
}

// File attachments for service requests
model ServiceAttachment {
  id               String @id @default(cuid())
  serviceRequestId String
  fileName         String
  fileType         String
  fileSize         Int
  filePath         String
  uploadedBy       String
  uploadedAt       DateTime @default(now())
  description      String?
  category         AttachmentCategory

  // Relationships
  serviceRequest ServiceRequest @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)

  @@map("service_attachments")
  @@schema("vehicle")
}

// Workflow steps for service requests
model ServiceWorkflowStep {
  id               String @id @default(cuid())
  serviceRequestId String
  stepName         String
  stepType         WorkflowStepType
  status           WorkflowStepStatus @default(Pending)
  assignedTo       String?
  dueDate          DateTime?
  completedAt      DateTime?
  completedBy      String?
  notes            String?
  order            Int

  // Relationships
  serviceRequest ServiceRequest @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)

  @@map("service_workflow_steps")
  @@schema("vehicle")
}

// Service request templates for common requests
model ServiceRequestTemplate {
  id                String @id @default(cuid())
  name              String
  description       String
  serviceType       ServiceRequestType
  defaultPriority   ServiceRequestPriority
  estimatedDuration Int
  requiredParts     String? // JSON array
  workSteps         String? // JSON array
  checklistItems    String? // JSON array
  isActive          Boolean @default(true)
  createdBy         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("service_request_templates")
  @@schema("vehicle")
}

// Enums for the unified service system
enum ServiceRequestType {
  SCHEDULED_MAINTENANCE @map("Scheduled Maintenance")
  CORRECTIVE_REPAIR     @map("Corrective Repair")
  EMERGENCY_REPAIR      @map("Emergency Repair")
  INSPECTION            @map("Inspection")
  RECALL_SERVICE        @map("Recall Service")

  @@schema("vehicle")
}

enum ServiceRequestStatus {
  DRAFT         @map("Draft")
  SUBMITTED     @map("Submitted")
  APPROVED      @map("Approved")
  PARTS_ORDERED @map("Parts Ordered")
  SCHEDULED     @map("Scheduled")
  IN_PROGRESS   @map("In Progress")
  AWAITING_PARTS @map("Awaiting Parts")
  COMPLETED     @map("Completed")
  CANCELLED     @map("Cancelled")
  ON_HOLD       @map("On Hold")

  @@schema("vehicle")
}

enum ServiceRequestPriority {
  LOW       @map("Low")
  MEDIUM    @map("Medium")
  HIGH      @map("High")
  CRITICAL  @map("Critical")
  EMERGENCY @map("Emergency")

  @@schema("vehicle")
}

enum PartUrgency {
  Normal    @map("Normal")
  Urgent    @map("Urgent")
  Emergency @map("Emergency")

  @@schema("vehicle")
}

enum PartRequestStatus {
  Pending  @map("Pending")
  Approved @map("Approved")
  Rejected @map("Rejected")
  Ordered  @map("Ordered")
  Received @map("Received")
  Issued   @map("Issued")

  @@schema("vehicle")
}

enum ApprovalType {
  Customer   @map("Customer")
  Manager    @map("Manager")
  Technical  @map("Technical")
  Financial  @map("Financial")

  @@schema("vehicle")
}

enum ApprovalStatus {
  Pending  @map("Pending")
  Approved @map("Approved")
  Rejected @map("Rejected")

  @@schema("vehicle")
}

enum AttachmentCategory {
  Photo     @map("Photo")
  Document  @map("Document")
  Video     @map("Video")
  Audio     @map("Audio")
  Report    @map("Report")
  Other     @map("Other")

  @@schema("vehicle")
}

enum WorkflowStepType {
  Approval     @map("Approval")
  Task         @map("Task")
  Checkpoint   @map("Checkpoint")
  Notification @map("Notification")

  @@schema("vehicle")
}

enum WorkflowStepStatus {
  Pending     @map("Pending")
  InProgress  @map("In Progress")
  Completed   @map("Completed")
  Skipped     @map("Skipped")
  Failed      @map("Failed")

  @@schema("vehicle")
}

// City Event Log for sync recovery and event sourcing
model CityEventLog {
  id          String   @id @default(cuid())
  eventId     String   @unique @map("event_id")
  eventType   String   @map("event_type")
  cityId      String   @map("city_id")
  eventData   Json     @map("event_data")
  timestamp   DateTime @default(now())
  processed   Boolean  @default(false)
  processedAt DateTime? @map("processed_at")
  retryCount  Int      @default(0) @map("retry_count")

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relation to City
  city City @relation(fields: [cityId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([cityId])
  @@index([processed, retryCount, updatedAt])
  @@index([timestamp])
  @@map("city_event_logs")
  @@schema("vehicle")
}


