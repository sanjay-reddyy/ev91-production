// Prisma schema for rider registration and KYC
// Add more fields and relations as needed

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["rider"]
}

// City model - Synchronized from vehicle-service
model City {
  id String @id @default(cuid())

  // Basic Information
  name        String @unique // Mumbai, Delhi, Bangalore, etc.
  displayName String // Mumbai, New Delhi, Bengaluru, etc.
  code        String @unique // MUM, DEL, BLR, etc.

  // Location Details
  state    String // Maharashtra, Delhi, Karnataka, etc.
  country  String @default("India")
  timezone String @default("Asia/Kolkata")

  // Geographic Coordinates (City Center)
  latitude  Float
  longitude Float

  // Administrative Details
  pinCodeRange String? // JSON array of pin codes served
  regionCode   String? // North, South, East, West

  // Operational Details
  isActive      Boolean   @default(true)
  isOperational Boolean   @default(true) // City operational for services
  launchDate    DateTime?

  // Business Information
  estimatedPopulation Int?
  marketPotential     String? // High, Medium, Low

  // Event Sourcing Fields (for cross-service synchronization)
  version           Int     @default(1) // For optimistic locking
  lastModifiedBy    String? // User ID who last modified
  eventSequence     Int     @default(0) // Auto-increment for event ordering
  lastSyncAt        DateTime @default(now()) // Last sync timestamp

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cities")
  @@schema("rider")
}

model Rider {
  id            String   @id @default(uuid())
  phone         String   @unique
  phoneVerified Boolean  @default(false)
  registrationStatus String @default("PENDING") // PENDING, PHONE_VERIFIED, KYC_COMPLETED, COMPLETED
  isActive      Boolean  @default(false) // Decoupled activation status from registration status

  // User data
  name          String?
  dob           String?
  address1      String?
  address2      String?
  city          String?
  state         String?
  pincode       String?
  emergencyName String?
  emergencyPhone String?
  emergencyRelation String?

  // KYC fields
  kycStatus     String   @default("pending")
  aadhaar       String?
  pan           String?
  dl            String?
  selfie        String?

  // Vehicle Assignment
  assignedVehicleId String?
  assignmentDate    DateTime?
  hubId             String? // Hub where rider is based

  // Store Assignment
  assignedStoreId   String?
  assignedClientId  String?
  storeAssignmentDate DateTime?
  storeAssignmentNotes String?

  // Compliance
  consent       Boolean  @default(false)
  consentLogs   String?
  ip            String?
  agreementSigned Boolean @default(false)

  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  vehicleHistory RiderVehicleHistory[] // Relationship to vehicle assignment history
  kycDocuments   KycDocument[]         // Relationship to KYC documents

  @@schema("rider")
}

// Vehicle Assignment History - Tracks all vehicle assignments for riders
model RiderVehicleHistory {
  id            String   @id @default(uuid())
  riderId       String
  vehicleId     String   // ID from vehicle-service

  // Assignment Details
  assignedAt    DateTime @default(now())
  returnedAt    DateTime?
  assignedBy    String   // User ID who assigned the vehicle
  returnedBy    String?  // User ID who processed the return

  // Vehicle Information (denormalized from vehicle-service for faster retrieval)
  registrationNumber String
  vehicleMake        String? // Brand name (Honda, Ola, etc.)
  vehicleModel       String? // Model name (Activa, S1 Pro, etc.)

  // Status and Metadata
  status            String @default("ACTIVE") // ACTIVE, RETURNED
  notes             String? // Assignment/return notes
  hubId             String? // Hub where vehicle was assigned from

  // Performance and Usage Data
  startMileage      Int?   // Mileage reading at assignment
  endMileage        Int?   // Mileage reading at return
  batteryPercentageStart Int?
  batteryPercentageEnd   Int?

  // Maintenance Information
  conditionOnAssign String? // Excellent, Good, Fair, Poor
  conditionOnReturn String?
  damagesReported   String? // JSON array of reported damages

  // Issues and Feedback
  riderFeedback     String? // Rider's feedback on the vehicle
  issuesReported    String? // JSON array of reported issues

  // Audit and Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  rider     Rider   @relation(fields: [riderId], references: [id], onDelete: Cascade)

  @@index([riderId])
  @@index([vehicleId])
  @@index([status])
  @@index([assignedAt])
  @@map("rider_vehicle_history")
  @@schema("rider")
}

// KYC Documents - Stores document uploads and verification status
model KycDocument {
  id                 String    @id @default(uuid())
  riderId            String
  documentType       String    // aadhaar, pan, dl, selfie
  documentTypeDisplay String?  // Display name for the document type
  documentNumber     String?   // Document identification number
  documentImageUrl   String?   // URL to the document image in S3
  verificationStatus String    @default("pending") // pending, verified, rejected
  verificationDate   DateTime?
  verificationNotes  String?
  verifiedBy         String?   // Admin user who verified the document

  // Audit and Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  rider     Rider   @relation(fields: [riderId], references: [id], onDelete: Cascade)

  @@index([riderId])
  @@index([documentType])
  @@index([verificationStatus])
  @@map("kyc_documents")
  @@schema("rider")
}

// Temporary OTP verification table for MSG91 flow
model OtpVerification {
  id        String   @id @default(uuid())
  tempId    String   @unique
  phone     String
  otp       String
  requestId String   @default("") // MSG91 request ID for verification
  attempts  Int      @default(0)
  verified  Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@schema("rider")
}
